audit.forin.name=Possible for/in

audit.forin.description=Search for possible for/in construct candidates.


audit.redundant_unboxing.name=Redundant unboxing

audit.redundant_unboxing.description=Searches the code for redundant unboxing. For example\:<br> <CODE><blockquote> public void a(){<br> &nbsp;&nbsp;Integer foo \= 5;<br> &nbsp;&nbsp;int bar \= foo<font color\="red">.intValue()</font>; // redundant unboxing<br> }<br> </blockquote></CODE> Here, calling method Integer.intValue() is not necessary, because in J2SE5, Integer is unboxed to int automatically.

audit.redundant_boxing.name=Redundant boxing

audit.redundant_boxing.description=Searches the code for redundant boxing. For example\\\:<br> <CODE><blockquote> public void a(){<br> &nbsp;&nbsp;Integer foo \\\= <font color\\\="red">new Integer(</font>5<font color\\\="red">)</font>; // redundant boxing<br> }<br> </blockquote></CODE> You do not need to create new object of type Integer in J2SE5\\\: int is automatically boxed to Integer.

audit.generics.name=Generics usage

audit.generics.description=This audit rule finds all variables of generic types, which are used without type arguments.<br> For example\:<br> <code><blockquote> List list \= new ArrayList(); // violation<br> list.put("string");<br> String element \= (String) list.get(0); </blockquote></code>  List is generic type in J2SE5, and in this the code could look like this\: <code><blockquote> List<font color\="red">&lt;String&gt;</font> list \= new ArrayList<font color\="red">&lt;String&gt;</font>();<br> list.put("string");<br> String element \= list.get(0); </blockquote></code>  A corrective action for this audit rule will be available in next versions of RefactorIT. 
