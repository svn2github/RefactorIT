# Unused Imports

audit.unused_import.name=Unused imports
audit.unused_import.description=\
  Search for <CODE><FONT color='#0000FF'>import</FONT></CODE> \
  declarations which could be safely removed.


# Unused Local Variables

audit.unused_variable.name=Unused local variables...
audit.unused_variable.description=\
  Search for local variable declarations which are never used.

audit.unused_variable.skip.method_parameters.name=Skip method parameters
audit.unused_variable.skip.catch_parameters.name=Skip catch clause parameters


# Shading Fields

audit.shading.name=Shadowed fields...
audit.shading.description=\
  Search for local variables and parameters that have same names as class fields.

audit.shading.skip.constructors.name=Skip constructors
audit.shading.skip.setters.name=Skip setter methods


# Not Used

audit.not_used.name=Not used items
audit.not_used.description=Searches for not used code elements. Selects additional exclude rules for \
finding most significant unused elements of code.


# Dangerous Iterator Usage

audit.dangerous_iterator.name=Dangerous iterator usage
audit.dangerous_iterator.description=Search for places in code where \
Iterator.next() is called without Iterator.hasNext() condition.


# Empty Blocks

audit.empty_block.name=Empty blocks
audit.empty_block.description=\
  Search for empty control flow blocks.


# String.toString() conversions

audit.to_string.name=String.toString() conversions
audit.to_string.description=\
  Search for pointless <CODE>String.toString()</CODE> conversions.


# String equals safe order

audit.str_equals_order.name=String equals() unsafe calls
audit.str_equals_order.description=\
  Search for places in code, where String type variable is compared \
  with string literal expression using equals() method.


# Boolean Literals In Comparisons

audit.boolean_comparison.name=Boolean literals in comparisons
audit.boolean_comparison.description=\
  Search for boolean literals in comparisons.


# Boolean comparison in loop condition

audit.loop_condition.name=Boolean assignment in loop conditions
audit.loop_condition.description=\
  Search for boolean assignment in loop conditions.<br> \
  Example: <br><br>\
  <CODE>&nbsp;&nbsp;boolean a = true; <br>\
  &nbsp;&nbsp;boolean b = true; <br><br>\
  &nbsp;&nbsp;while <FONT color='#FF0000'>(a=b)</FONT>{ <br>\
  &nbsp;&nbsp;b = false; <br>\
  &nbsp;&nbsp;}</CODE>


# String concatenation order

audit.string_concat_order.name=String concatenation dangerous order
audit.string_concat_order.description=\
  Search for arithmetical expressions as first parameters in concatenation with String objects<br><br>\
  <CODE> &nbsp;&nbsp;String Str = <FONT color='#FF0000'>1 + 2</FONT> + "String";</CODE> // Possibly error, result - "3String"


# Possible lost override

audit.lost_override.name= Possible method lost override
audit.lost_override.description= Search for possible lost method override in class hierarchy.\
<br>&nbsp;&nbsp;Find methods, that do not override any of super methods, but have similar signature and \
could override some super methods, that are not currently overridden.


# Static Field Accessors

audit.static_accessors.name = Ensure static field accessors
audit.static_accessors.description = Search class hierarchy for missing accessor methods \
that should access redefinined static field.


# PossibleBadForLoop

audit.loop_cond_modification.name = Loop condition variables` modification
audit.loop_cond_modification.description = Searches for places in code, where \
variables, that are used in loop stop condition, are modified in loop body.

# Possible method chain call NPE

audit.possible_npe.name=Possible method chain call NPE
audit.possible_npe.description=\
  Search for method chain invocation statements, where NPE could \
  possibly appear, if one method returns null object. <br><br>Example:<br>\
  <FONT color\='\#0000FF'><CODE>Object.methodX().methodY().methodZ()</CODE></FONT>\
  //dangerous expression.

# equals() and hashCode() not paired

audit.equals_hashcode.name=equals() and hashCode() not paired
audit.equals_hashcode.description=\
  Search for classes that override only one of <FONT color\='\#0000FF'><CODE>Object.equals()</CODE></FONT> or <FONT color\='\#0000FF'><CODE>Object.hashCode()</CODE></FONT> methods.

# Switch Case Statement Fallthroughs

audit.switch_case.name=Switch statement fallthroughs
audit.switch_case.description=\
  Search for <CODE><FONT color='#0000FF'>switch</FONT></CODE> \
  statement fallthroughs


# Switch Statements Without A 'default' Case

audit.switch_default.name=Switch statements without a default case
audit.switch_default.description=\
  Search for <CODE><FONT color='#0000FF'>switch</FONT></CODE> \
  statements without \
  <CODE><FONT color='#0000FF'>default</FONT></CODE> cases.


# Parameter Reassignments (modifications)

audit.parameter_assignment.name=Parameter reassignments
audit.parameter_assignment.description=\
  Search for a parameters that are modified in a method body.


# Redundant Cast Expressions

audit.redundant_cast.name=Redundant casts expressions
audit.redundant_cast.description=\
  Search for redundant cast expressions (expressions \
  that already have a type of the cast or a subclass).
audit.redundant_cast.skip.bitwise_primitives.name=skip widening primitives conversion in bitwise operations



# Redundant instanceof Expressions

audit.redundant_instanceof.name=Redundant instanceof expressions
audit.redundant_instanceof.description=\
  Search for redundant \
  <CODE><FONT color='#0000FF'>instanceof</FONT></CODE> expressions. \
  The type already is the specified type and expression is always \
  <CODE><FONT color='#0000FF'>true</FONT></CODE>.


# Self-Assignments

audit.self_assignment.name=Field and variable self-assignments
audit.self_assignment.description=\
  Search for variable assignments to themselves.


# Blockless Statements

audit.missing_block.name=Blockless statements
audit.missing_block.description=\
  Search for blockless control statements.


# Static Member Accessed Via Object Reference

audit.nonstatic_reference.name=Static member accessed via object reference
audit.nonstatic_reference.description=\
  Search for <CODE><FONT color='#0000FF'>static</FONT></CODE> \
  members accessed via object references.


# Empty Statements

audit.empty_statement.name=Empty statements
audit.empty_statement.description=\
  Search for empty statements.


# Unused Variable Assignments

audit.unused_assignment.name=Unused variable assignments
audit.unused_assignment.description=\
  Search for variables which are assigned to but never read.


# Loose Nested Blocks

audit.nested_block.name=Loose nested blocks
audit.nested_block.description=\
  Search for loose nested blocks.


# Floating point variable equal comparison

audit.float_equal_compare.name=Floating point variables equal comparison
audit.float_equal_compare.description=Search for comparison of floating point variables using <CODE>'\=\='</CODE> operator<br><br>Example\:<blockquote><CODE>double my_PI \= 3,14159;<br> if (my_PI \=\= Math.PI){<br> &nbsp;&nbsp;// ^-bug, they are NOT equal\!<br> &nbsp;&nbsp;do_something();<br>  }</CODE></blockquote>


# Empty blocks and bodies

audit.empty_blocks.name=Empty blocks and bodies
audit.empty_blocks.description=Search for empty blocks and bodies
audit.empty_blocks.skip.with_comments.name=skip blocks with comments inside


# Integer division in floating point context

audit.int_division.name=Integer division in floating point context
audit.int_division.description=Search for integer division in floating point context (possible loss of precision) <br><br>Example\:<blockquote><code>int a \= 1;<br>int b \= 2;<br>float c \= a/b; // bug<br>// c \=\= 0.0, not 1/2 (\!)</code></blockquote></pre>


# equals() comparing variables of different type

audit.equals_on_diff_types.name=equals() comparing variables of diff. type
audit.equals_on_diff_types.description=<CODE><FONT color\='\#0000FF'>Object.equals()</FONT></CODE> comparing variables of different types <br><br>Example\: <blockquote><CODE>public void someFunct(TypeA a){<br>  &nbsp;&nbsp;TypeB b \= new TypeB();<br> &nbsp;&nbsp;if (b.equals(a)){<br>  &nbsp;&nbsp;&nbsp;&nbsp;// ^-- a bug<br>  &nbsp;&nbsp;}<br>  }</CODE></blockquote>
audit.equals_on_diff_types.skip.same_branch.name=skip alerts when comparing types from the same inheritance branch


# Strings compared using "==" and "!="

audit.str_equal_compare.name=Strings compared using  "\=\=" and "\!\="
audit.str_equal_compare.description=Finds cases of strings compared between each other with "\=\=" and "\!\=" operators. It`s most likely a bug, because '\=\=' operator compares not the strings contained in that objects, but their pointers. <p> The correct way to compare two strings is <CODE>str1.equals(str2);</CODE>


# Parameter order checker

audit.parameter_order.name=Parameter order checker
audit.parameter_order.description= Compare the parameters in a call to the signature of the method.<br><br> Example\:<p> method signature is\: <blockquote><CODE>public String getMessage(String KEY, String operator, String partner);</CODE></blockquote>  and then we call it\: <blockquote><CODE> String result \= getMessage(messageKey, partner, operator); </CODE></blockquote> Parameter order checker rule would flag an error because the partner is nothing like its argument in the signature, but very close to another param in the signature.
audit.parameter_order.options.header.text=Set names comparison precision\:
audit.parameter_order.options.footer.text=(100 for exact names match only)


# Null parameters

audit.null_parameters.name=Null parameters check
audit.null_parameters.description= Check if nulls are used as parameters when calling methods


